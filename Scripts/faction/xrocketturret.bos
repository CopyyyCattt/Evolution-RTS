#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, firepoint, turret, barrel, launcher, sleeve;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{

	gun_1 = firepoint;
	start-script SmokeUnit();
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if( gun_1 == 1 )
	{
		turn sleeve to z-axis <0.000000> speed <400.000000>;
	}
	if( gun_1 == 2 )
	{
		turn sleeve to z-axis <120.027473> speed <400.000000>;
	}
	if( gun_1 == 3 )
	{
		turn sleeve to z-axis <-120.027473> speed <400.000000>;
	}
	turn turret to y-axis heading speed <5000.000000>;
	turn launcher to x-axis <0.000000> - pitch speed <5000.000000>;
	wait-for-turn sleeve around z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from firepoint;
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = firepoint;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = firepoint;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	corpsetype = 1; 
	explode base type EXPLODE_ON_HIT;
	explode turret type EXPLODE_ON_HIT;
	explode launcher type EXPLODE_ON_HIT;
	explode sleeve type EXPLODE_ON_HIT;
	explode barrel type EXPLODE_ON_HIT;
}
